##### ALGORITHM #####

The auto-scaling algorithm works by taking the average response
time within a timing window and see if its within a minimum
or maximum threshold. If so, scale up or down.

1. While time elapsed < polling_interval
    - make a GET request to the service being scaled
    - add response time to a sum

2. When time elapsed > polling_interval
    - calculate average by taking the sum and divide by number of requests
      sent within the polling_interval
    - reset time elapsed to 0.

3. Check if the average is within threshold values.
    - if avg is larger than max_threshold, proceed, else go to step 1
    - if avg is smaller than min_threshold, proceed, else go to step 1

4.
  - If avg is larger, check if scaling would result in more replicas than 'max_replica'
      - If yes, go to step 1.
      - If no proceed

  - If avg is smaller, check if scaling would result in less replicas than 'min_replica'
      - If yes, go to step 1.
      - If no proceed

5.
  - If avg is larger, scale up (add more replicas) by 'scale_step' amount
  - If avg is smaller, scale down (remove replicas) by 'scale_step' amount

##### PARAMETERS #####

Parameters for the autoscaler are set in swarmautoscaler.yml.
The default configuration has the following values:

poll_interval: 10
scale_step: 1
scale_up_threshold: 3
scale_down_threshold: 2
max_replica: 20
min_replica: 1

Scale step is set arbitrarily. It was easier to monitor the scaler with a scale step of 1.
After testing, the cybera VMs seem to vary highly in response time depending on the time of day.

In somedays, a scale up and down threshold of 4 and 2 respectively makes a nice curve, and others
require a higher scale up threshold. It was hard to have an exact configuration due to the high variance

The number of replicas depend on the size of the VMs and number of workers. Since we have 'large' VMs,
we allow a large number of replicas to test and have better response times.
